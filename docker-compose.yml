version: '3.7'

services:
  market:
    build:
      context: .
      dockerfile: docker/server/Dockerfile
    restart: 'always'
    env_file:
      - docker/postgres/env.env
      - .env
      - docker/env/.email.env
    environment:
      FRONTEND_SITE: 'http://localhost:8001'
    depends_on:
      - db
      - redis
    ports:
      - '8002:8000'
    volumes:
      - ./app/market:/app
      - redis_socket:/redis_socket
    networks:
      - market_network

  db:
    image: postgres:13.2-alpine
    hostname: postgres
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - docker/postgres/env.env
    ports:
      - "6438:5432"
    networks:
      - market_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
      interval: 50s
      timeout: 5s
      retries: 5

  redis:
    build:
      context: .
      dockerfile: docker/redis/Dockerfile
    image: redis:6.0.1-alpine
    restart: always
    volumes:
      - redis_data:/data
      - redis_socket:/redis_socket
    ports:
      - "6386:6379"
    networks:
      - market_network
    healthcheck:
      test: [ "CMD", "redis-cli","ping" ]
      interval: 1m20s
      timeout: 5s
      retries: 3

  celery:
    build:
      context: .
      dockerfile: docker/server/Dockerfile
    entrypoint: ''
    command: celery -A source worker -l info --beat
    volumes:
      - ./app/market:/app
      - redis_socket:/redis_socket
    env_file:
      - docker/postgres/env.env
      - .env
      - docker/env/.email.env
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - market_network


networks:
  market_network:

volumes:
  postgres_data:
  redis_data:
  redis_socket:
